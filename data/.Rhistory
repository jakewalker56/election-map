data.frame(CD=c(d),
Label = c(label),
Count = c(
as.numeric(as.character(state_demographics[state_demographics$Title == label,district]))
)))
}
for(label in race_labels) {
count <- as.numeric(as.character(state_demographics[state_demographics$Title == label,district]))
#note Hispanic people sometimes self-identify as "white", sometimes as "other"
#so we have to subtract this number from the white number somehow.  Basically we
#make something slightly better than a guess.
if(label == "White"){
latino = as.numeric(as.character(state_demographics[state_demographics$Title == "Hispanic or Latino (of any race)",district]))
other = as.numeric(as.character(state_demographics[state_demographics$Title == "Some other race", district]))
#assume latinos report white or other at the same ratio white/otehr shows up in their district
white_percent = count / (other + count)
#we treat white and latino as separate buckets
white_total <- count - white_percent * latino
other_total <- other - (1 - white_percent) * latino
if(white_total < 0){
#assume the other bucket will take any of our negative values.
#This breaks if some people report differently than
#we expect (e.g. two or more races)
white_total <- 0
}
if(other_total < 0) {
#if our allocation drops the other bucket under 0, take those
#people from the white bucket instead
white_total <- white_total + other_total
}
count <- white_total
}
if(label == "Some other race"){
latino = as.numeric(as.character(state_demographics[state_demographics$Title == "Hispanic or Latino (of any race)",district]))
white = as.numeric(as.character(state_demographics[state_demographics$Title == "White", district]))
#assume latinos report white or other at the same ratio white/otehr shows up in their district
other_percent = count / (white + count)
other_total <- count - other_percent * latino
white_total <- white - (1 - other_percent) * latino
if(other_total < 0){
#assume the white bucket will take any of our negative values.
#This breaks if some people report differently than
#we expect (e.g. two or more races)
other_total <- 0
}
if(white_total < 0) {
#if this allocation drops the other bucket under 0, take those
#people from the white bucket instead
other_total <- other_total + white_total
}
count <- other_total
}
state_races <- rbind(state_races,
data.frame(CD=c(d),
Label = c(label),
Count = c(count)))
}
for(label in age_labels) {
state_ages <- rbind(state_ages,
data.frame(CD=c(d),
Label = c(label),
Count = c(
as.numeric(as.character(state_demographics[state_demographics$Title == label,district]))
)))
}
for(label in gender_labels) {
state_genders <- rbind(state_genders,
data.frame(CD=c(d),
Label = c(label),
Count = c(
as.numeric(as.character(state_demographics[state_demographics$Title == label,district]))
)))
}
# state_races <- rbind(state_races,
#                        data.frame(CD=c(d),
#                                   Label = "Other",
#                                   Count = c(
#                                     state_population[state_population$CD == d, "Count"] - sum(state_races[state_races$CD == d, "Count"])
#                                   )))
}
state_ages$State = state
state_genders$State = state
state_races$State = state
state_population$State = state
#aggregate voter behavior to the district level
national_ages <- rbind(national_ages, state_ages)
national_genders <- rbind(national_genders, state_genders)
national_races <- rbind(national_races, state_races)
national_population <- rbind(national_population, state_population)
}
#merge election rows with the same state/district values
temp_election <- data.frame(State=c(), CD=c(), Clinton=c(), Trump=c())
for(state in unique(national_election$State)){
for(district in unique(national_election[national_election$State == state,"CD"])){
trump = sum(national_election$Trump[national_election$State == state & national_election$CD == district])
clinton = sum(national_election$Clinton[national_election$State == state & national_election$CD == district])
temp_election <- rbind(temp_election, data.frame(State = state, CD = district, Trump = trump, Clinton = clinton))
}
}
national_election <- temp_election
#remove leading 0 from district values by convert to strings, casting to
#numbers, then releveling.  There is probably a better way to do this, but
#whatever, it works
national_ages$CD <- as.factor(as.double(as.character(national_ages$CD)))
national_population$CD <- as.factor(as.double(as.character(national_population$CD)))
national_races$CD <- as.factor(as.double(as.character(national_races$CD)))
national_genders$CD <- as.factor(as.double(as.character(national_genders$CD)))
national_election$CD <- as.factor(as.double(as.character(national_election$CD)))
demos <- list(
"gender" = cbind(national_genders, InterpolatedTrump=0, InterpolatedClinton=0),
"race" = cbind(national_races, InterpolatedTrump=0, InterpolatedClinton=0),
"age" = cbind(national_ages, InterpolatedTrump=0, InterpolatedClinton=0)
)
vote_share <- list(
"gender" = read.csv("turnout/gender_vote_share.csv"),
"age" = read.csv("turnout/age_vote_share.csv"),
"race" = read.csv("turnout/race_vote_share.csv")
)
turnout <- list ()
for(demo in c("gender", "age", "race")){
#to estimate the voting behavior of people in this demographic grouping,
#we use known voting behavior of demographics combined with
#known population data in this area
#specifically, we first figure out the implied voting turnout from each demo
for(x in unique(demos[[demo]]$Label)){
demographic_population <- sum(demos[[demo]][demos[[demo]]$Label == x,"Count"])
total_votes <- sum(national_election$Trump) + sum(national_election$Clinton)
total_demographic_voters <- vote_share[[demo]][vote_share[[demo]]$Label == x,]$voteshare * total_votes
turnout[[demo]][x] <- total_demographic_voters / demographic_population
}
#Next we come up with an "expected number of votes" in each State/District combo
#based on demographic behavior and actual observed turnout for each demographic
#group of this category.  Then we find the multiplier required
#to get us from expected to actual observed turnout.
demographic_projection <<- data.frame(CD=c(), State=c(),
ProjectedTrump=c(), ProjectedClinton=c(),
ActualTrump=c(), ActualClinton=c())
sapply(1:nrow(national_election), function(x){
expected_trump_votes <- 0
expected_clinton_votes <- 0
for(i in unique(demos[[demo]]$Label)){
#total people in this state/district in this demo * voter turnout rate * proportion voting for Trump/Clinton
expected_trump_votes <- expected_trump_votes +
demos[[demo]][demos[[demo]]$CD == national_election[x,]$CD & demos[[demo]]$State == national_election[x,]$State & demos[[demo]]$Label == i,]$Count *
turnout[[demo]][i] *
vote_share[[demo]][vote_share[[demo]]$Label == i,]$Trump
expected_clinton_votes <- expected_clinton_votes +
demos[[demo]][demos[[demo]]$CD == national_election[x,]$CD & demos[[demo]]$State == national_election[x,]$State & demos[[demo]]$Label == i,]$Count *
turnout[[demo]][i] *
vote_share[[demo]][vote_share[[demo]]$Label == i,]$Clinton
}
multiplier <- (national_election[x,"Trump"] + national_election[x,"Clinton"])/(expected_trump_votes + expected_clinton_votes)
margin_shift <- 2 * (multiplier * expected_trump_votes - national_election[x,"Trump"])/((national_election[x,"Trump"] + national_election[x,"Clinton"]))
demographic_projection <<- rbind(demographic_projection, data.frame(
CD = c(national_election[x,"CD"]),
State = c(as.character(national_election[x,"State"])),
ProjectedTrump = c(expected_trump_votes),
ProjectedClinton = c(expected_clinton_votes),
ActualTrump = c(national_election[x,"Trump"]),
ActualClinton = c(national_election[x,"Clinton"]),
VoteMultiplier = multiplier,
MarginShift = margin_shift
), make.row.names=FALSE)
}
)
sapply(1:nrow(demos[[demo]]), function(x){
vote_multiplier <- demographic_projection[demographic_projection$CD == demos[[demo]][x,]$CD & demographic_projection$State == demos[[demo]][x,]$State,]$VoteMultiplier
margin_shift <- demographic_projection[demographic_projection$CD == demos[[demo]][x,]$CD & demographic_projection$State == demos[[demo]][x,]$State,]$MarginShift
people_in_demo <- demos[[demo]][x,]$Count
turnout_rate <- turnout[[demo]][demos[[demo]][x,"Label"]]
expected_clinton_percentage <- vote_share[[demo]][vote_share[[demo]]$Label == demos[[demo]][x,]$Label,]$Clinton
expected_trump_percentage <- vote_share[[demo]][vote_share[[demo]]$Label ==  demos[[demo]][x,]$Label,]$Trump
#Note interopolated votes can be negative
#because we are applyinig a uniform margin shift for an entire district
#across all demographics, if one demographic voted very strongly in one
#direction, the overall shift could make them negative
#this mostly happens with Black and African Americans, 92% of whom voted
#for democrats.  If a distric voted more heavily than their demographics
#indicate for democrats, the Black vote for Trump will appear negative
#To solve this, we'd have to find a non-linear way of updating demographic
#margins.  We could do this, but it's more work than it's worth
demos[[demo]][x,]$InterpolatedTrump <<- people_in_demo * turnout_rate * vote_multiplier * (expected_trump_percentage - margin_shift/2)
demos[[demo]][x,]$InterpolatedClinton <<- people_in_demo * turnout_rate * vote_multiplier * (expected_clinton_percentage + margin_shift/2)
})
# if(demo_population < 0){
#   print(paste("WARNING: demo population negative (", demo_population, ") for State = ", election_data[x,"State"]," and district = ", election_data[x,"CD"], sep=""))
#   print(demographic_data[[modifier[1]]][demographic_data[[modifier[1]]]$CD == election_data[x,"CD"] & demographic_data[[modifier[1]]]$State == election_data[x,"State"] & demographic_data[[modifier[1]]]$Label == modifier[2],])
# }
#
}
evaluate <- function(aggregation=c("electoral", "population"),
election_data,
demographic_data,
population_data,
modifiers,
normalization=c("model", "uniform")){
#score election data
for(modifier in modifiers){
#for each row in election data
helped_rep <- sapply(1:nrow(election_data), function(x, modifier, normalization){
if(x %% 1000 == 0) {
print(paste("processing row", x))
}
rep_demo_votes = demographic_data[[modifier[[1]]]][
demographic_data[[modifier[[1]]]]$CD == election_data[x,]$CD &
demographic_data[[modifier[[1]]]]$State == election_data[x,]$State &
demographic_data[[modifier[[1]]]]$Label == modifier[[2]]
,]$InterpolatedTrump
dem_demo_votes = demographic_data[[modifier[[1]]]][
demographic_data[[modifier[[1]]]]$CD == election_data[x,]$CD &
demographic_data[[modifier[[1]]]]$State == election_data[x,]$State &
demographic_data[[modifier[[1]]]]$Label == modifier[[2]]
,]$InterpolatedClinton
if(modifier[3] == "margin"){
net_change = (rep_demo_votes + dem_demo_votes) * as.double(modifier[4])/2
election_data[x,"Clinton"] <<- election_data[x,"Clinton"] + net_change
election_data[x,"Trump"] <<- election_data[x,"Trump"] - net_change
} else if (modifier[3] == "turnout") {
#this doesn't really do anything, because we assume demo share
vote_multiple = as.double(modifier[4])
election_data[x,"Clinton"] <<- election_data[x,"Clinton"] + vote_multiple * dem_demo_votes
election_data[x,"Trump"] <<- election_data[x,"Trump"] + vote_multiple * rep_demo_votes
return(rep_demo_votes > dem_demo_votes)
}
}, modifier, normalization)
#print(paste("this modifier helped", helped_rep, "repulican districts (", nrow(election_data) - helped_rep,"democrat districts)"))
print(summary(helped_rep))
}
if(aggregation == "electoral")
{
rep.total = 0
dem.total = 0
for(state in unique(election_data$State)){
rep.votes = sum(election_data[election_data$State == state,"Trump"])
dem.votes = sum(election_data[election_data$State == state,"Clinton"])
if(state == "Maine" || state == "Nebraska"){
#"Maine and Nebraska ... allocate two electoral votes to the state
# popular vote winner, and then one electoral vote to the popular
#vote winner in each Congressional district"
#http://www.270towin.com/content/split-electoral-votes-maine-and-nebraska/
if(rep.votes > dem.votes){
rep.total <- rep.total + 2
} else {
dem.total <- dem.total + 2
}
for(district in unique(election_data[election_data$State == state,]$CD)){
rep.votes = sum(election_data[election_data$State == state & election_data$CD == district,"Trump"])
dem.votes = sum(election_data[election_data$State == state & election_data$CD == district,"Clinton"])
if(rep.votes > dem.votes){
rep.total <- rep.total + 1
} else {
dem.total <- dem.total + 1
}
}
}
else if(rep.votes > dem.votes){
rep.total <- rep.total + electoral.college[electoral.college$State == state, "electoral_votes"]
} else {
dem.total <- dem.total + electoral.college[electoral.college$State == state, "electoral_votes"]
}
}
print(paste("Total votes cast:", sum(election_data$Trump + election_data$Clinton)))
return(data.frame(rep.votes = rep.total, dem.votes = dem.total))
} else
{
return("ERROR")
}
}
millenial_turnout_increase = 0.17
modifiers <- list(
c("age", "25 to 34 years", "turnout", millenial_turnout_increase),
c("age", "20 to 24 years", "turnout", millenial_turnout_increase),
c("age", "15 to 19 years", "turnout", millenial_turnout_increase)
#c("race", "White", "margin", 0.7)
#c("race", "Hispanic or Latino (of any race)", "turnout", 0.0)
)
evaluate(aggregation="electoral", election_data = national_election, demographic_data = demos, population_data = national_population, modifiers = modifiers, normalization="uniform")
write(toJSON(national_election, digits=8), "election_data.json")
library(jsonlite)
write(toJSON(national_election, digits=8), "election_data.json")
write(toJSON(demos, digits=8), "demographic_data.json")
write(toJSON(national_population, digits=8), "population_data.json")
write(toJSON(electoral.college, digits=8), "electoral_college_data.json")
election_tree = list[unique(national_election$State)]
unique(national_election$State)
election_tree = list(unique(national_election$State))
election_tree
election_tree = list()
for(state in unique(national_election$State)){
election_tree[state] = list()
for(cd in unique(national_election[national_election$State == state,]$CD)){
election_tree[state][cd] = list()
election_tree[state][cd]["Trump"] = national_election[national_election$State == state & national_election$CD == cd,]$Trump
election_tree[state][cd]["Clinton"] = national_election[national_election$State == state & national_election$CD == cd,]$Clinton
}
}
election_tree
election_tree = list()
for(state in unique(national_election$State)){
print(state)
election_tree[state] = list()
for(cd in unique(national_election[national_election$State == state,]$CD)){
election_tree[state][cd] = list()
election_tree[state][cd]["Trump"] = national_election[national_election$State == state & national_election$CD == cd,]$Trump
election_tree[state][cd]["Clinton"] = national_election[national_election$State == state & national_election$CD == cd,]$Clinton
}
}
election_tree
for(state in unique(national_election$State)){
print(state)
election_tree[state] = list()
print(election_tree)
print(election_tree[state])
for(cd in unique(national_election[national_election$State == state,]$CD)){
election_tree[state][cd] = list()
election_tree[state][cd]["Trump"] = national_election[national_election$State == state & national_election$CD == cd,]$Trump
election_tree[state][cd]["Clinton"] = national_election[national_election$State == state & national_election$CD == cd,]$Clinton
}
}
for(state in unique(national_election$State)){
print(state)
election_tree[[state]] = list()
print(election_tree)
print(election_tree[state])
for(cd in unique(national_election[national_election$State == state,]$CD)){
election_tree[state][cd] = list()
election_tree[state][cd]["Trump"] = national_election[national_election$State == state & national_election$CD == cd,]$Trump
election_tree[state][cd]["Clinton"] = national_election[national_election$State == state & national_election$CD == cd,]$Clinton
}
}
election_tree = list()
for(state in unique(national_election$State)){
print(state)
election_tree[[state]] = list()
print(election_tree)
print(election_tree[[state]])
for(cd in unique(national_election[national_election$State == state,]$CD)){
election_tree[state][cd] = list()
election_tree[state][cd]["Trump"] = national_election[national_election$State == state & national_election$CD == cd,]$Trump
election_tree[state][cd]["Clinton"] = national_election[national_election$State == state & national_election$CD == cd,]$Clinton
}
}
election_tree = list()
for(state in unique(national_election$State)){
election_tree[[state]] = list()
for(cd in unique(national_election[national_election$State == state,]$CD)){
election_tree[[state]][[cd]] = list()
election_tree[[state]][[cd]][["Trump"]] = national_election[national_election$State == state & national_election$CD == cd,]$Trump
election_tree[[state]][[cd]][["Clinton"]] = national_election[national_election$State == state & national_election$CD == cd,]$Clinton
}
}
election_tree
write(toJSON(election_tree, digits=10), "election_data.json")
write(toJSON(national_election, digits=8), "election_data.json")
write(toJSON(election_tree, digits=10), "election_tree.json")
national_population
summary(national_population)
population_tree = list()
for(state in unique(national_population$State)){
population_tree[[state]] = list()
for(cd in unique(national_population[national_population$State == state,]$CD)){
population_tree[[state]][[cd]] = list()
population_tree[[state]][[cd]][["Total"]] = national_population[national_population$State == state & national_population$CD == cd,]$Count
}
}
population_tree
demos
demographic_tree = list()
summary(demos)
demos[[1]]
summary(demos[[1]])
demographic_tree = list()
for(demo in demos){
for(state in unique(demos[[demo]]$State)){
demographic_tree[[state]] = list()
for(cd in unique(demos[[demo]][demos[[demo]]$State == state,]$CD)){
demographic_tree[[state]][[cd]] = list()
demographic_tree[[state]][[cd]][[demo]] = list()
demographic_tree[[state]][[cd]][[demo]][["InterpolatedTrump"]] = demos[[demo]][demos[[demo]]$State == state & demos[[demo]]$CD == cd,]$InterpolatedTrump
demographic_tree[[state]][[cd]][[demo]][["InterpolatedClinton"]] = demos[[demo]][demos[[demo]]$State == state & demos[[demo]]$CD == cd,]$InterpolatedClinton
}
}
}
demo = demos[[1]]
for(state in unique(demos[[demo]]$State)){
demographic_tree[[state]] = list()
for(cd in unique(demos[[demo]][demos[[demo]]$State == state,]$CD)){
demographic_tree[[state]][[cd]] = list()
demographic_tree[[state]][[cd]][[demo]] = list()
demographic_tree[[state]][[cd]][[demo]][["InterpolatedTrump"]] = demos[[demo]][demos[[demo]]$State == state & demos[[demo]]$CD == cd,]$InterpolatedTrump
demographic_tree[[state]][[cd]][[demo]][["InterpolatedClinton"]] = demos[[demo]][demos[[demo]]$State == state & demos[[demo]]$CD == cd,]$InterpolatedClinton
}
}
for(state in unique(demos[[demo]]$State)){
print(state)
}
for(demo in demos){
print[[demo]]
}
for(demo in demos){
print(demo)
}
for(demo in demos){
summary(demo)
}
for(demo in demos){
print(summary(demo))
}
demos[1]
demos[2]
demos[3]
demos[4]
demos[1]$name
demos[1]
demographic_tree = list()
for(demo in c("gender", "age", "race")){
for(state in unique(demos[[demo]]$State)){
print(state)
demographic_tree[[state]] = list()
for(cd in unique(demos[[demo]][demos[[demo]]$State == state,]$CD)){
demographic_tree[[state]][[cd]] = list()
demographic_tree[[state]][[cd]][[demo]] = list()
demographic_tree[[state]][[cd]][[demo]][["InterpolatedTrump"]] = demos[[demo]][demos[[demo]]$State == state & demos[[demo]]$CD == cd,]$InterpolatedTrump
demographic_tree[[state]][[cd]][[demo]][["InterpolatedClinton"]] = demos[[demo]][demos[[demo]]$State == state & demos[[demo]]$CD == cd,]$InterpolatedClinton
}
}
}
demographic_tree = list()
for(demo in c("gender", "age", "race")){
for(state in unique(demos[[demo]]$State)){
demographic_tree[[state]] = list()
for(cd in unique(demos[[demo]][demos[[demo]]$State == state,]$CD)){
demographic_tree[[state]][[cd]] = list()
demographic_tree[[state]][[cd]][[demo]] = list()
demographic_tree[[state]][[cd]][[demo]][["InterpolatedTrump"]] = demos[[demo]][demos[[demo]]$State == state & demos[[demo]]$CD == cd,]$InterpolatedTrump
demographic_tree[[state]][[cd]][[demo]][["InterpolatedClinton"]] = demos[[demo]][demos[[demo]]$State == state & demos[[demo]]$CD == cd,]$InterpolatedClinton
}
}
}
demographic_tree
demographic_tree = list()
for(demo in c("gender", "age", "race")){
for(state in unique(demos[[demo]]$State)){
demographic_tree[[state]] = list()
for(cd in unique(demos[[demo]][demos[[demo]]$State == state,]$CD)){
demographic_tree[[state]][[cd]] = list()
demographic_tree[[state]][[cd]][[demo]] = list()
for(label in unique(demos[[demo]][demos[[demo]]$State == state & demos[[demo]]$CD == cd,]$Label)){
demographic_tree[[state]][[cd]][[demo]][[label]] = list();
demographic_tree[[state]][[cd]][[demo]][[label]][["InterpolatedTrump"]] = demos[[demo]][demos[[demo]]$State == state & demos[[demo]]$CD == cd & demos[[demo]]$Label == label,]$InterpolatedInterpolated
demographic_tree[[state]][[cd]][[demo]][[label]][["InterpolatedClinton"]] = demos[[demo]][demos[[demo]]$State == state & demos[[demo]]$CD == cd & demos[[demo]]$Label == label,]$InterpolatedClinton
}
}
}
}
demographic_tree
demographic_tree = list()
for(demo in c("gender", "age", "race")){
for(state in unique(demos[[demo]]$State)){
demographic_tree[[state]] = list()
for(cd in unique(demos[[demo]][demos[[demo]]$State == state,]$CD)){
demographic_tree[[state]][[cd]] = list()
demographic_tree[[state]][[cd]][[demo]] = list()
for(label in unique(demos[[demo]][demos[[demo]]$State == state & demos[[demo]]$CD == cd,]$Label)){
demographic_tree[[state]][[cd]][[demo]][[label]] = list();
demographic_tree[[state]][[cd]][[demo]][[label]][["InterpolatedTrump"]] = demos[[demo]][demos[[demo]]$State == state & demos[[demo]]$CD == cd & demos[[demo]]$Label == label,]$InterpolatedTrump
demographic_tree[[state]][[cd]][[demo]][[label]][["InterpolatedClinton"]] = demos[[demo]][demos[[demo]]$State == state & demos[[demo]]$CD == cd & demos[[demo]]$Label == label,]$InterpolatedClinton
}
}
}
}
demographic_tree
write(toJSON(election_tree, digits=10), "election_tree.json")
write(toJSON(population_tree, digits=10), "population_tree.json")
write(toJSON(demographic_tree, digits=10), "demographic_tree.json")
electoral_college_tree = list()
for(state in unique(electoral.college$State)){
electoral_college_tree[[state]] = electoral.collage[electoral.college$State == state,]$electoral_votes
}
for(state in unique(electoral.college$State)){
electoral_college_tree[[state]] = electoral.college[electoral.college$State == state,]$electoral_votes
}
electoral_college_tree = list()
for(state in unique(electoral.college$State)){
electoral_college_tree[[state]] = electoral.college[electoral.college$State == state,]$electoral_votes
}
electoral_college_tree
write(toJSON(electoral_college_tree, digits=10), "electoral_college_tree.json")
demographic_tree = list()
#first create the empty lists that can't be overwritten
for(demo in c("gender")){
for(state in unique(demos[[demo]]$State)){
demographic_tree[[state]] = list()
for(cd in unique(demos[[demo]][demos[[demo]]$State == state,]$CD)){
demographic_tree[[state]][[cd]] = list()
}
}
}
for(demo in c("gender", "age", "race")){
for(state in unique(demos[[demo]]$State)){
for(cd in unique(demos[[demo]][demos[[demo]]$State == state,]$CD)){
demographic_tree[[state]][[cd]][[demo]] = list()
for(label in unique(demos[[demo]][demos[[demo]]$State == state & demos[[demo]]$CD == cd,]$Label)){
demographic_tree[[state]][[cd]][[demo]][[label]] = list();
demographic_tree[[state]][[cd]][[demo]][[label]][["InterpolatedTrump"]] = demos[[demo]][demos[[demo]]$State == state & demos[[demo]]$CD == cd & demos[[demo]]$Label == label,]$InterpolatedTrump
demographic_tree[[state]][[cd]][[demo]][[label]][["InterpolatedClinton"]] = demos[[demo]][demos[[demo]]$State == state & demos[[demo]]$CD == cd & demos[[demo]]$Label == label,]$InterpolatedClinton
}
}
}
}
demographic_tree
write(toJSON(demographic_tree, digits=10), "demographic_tree.json")
